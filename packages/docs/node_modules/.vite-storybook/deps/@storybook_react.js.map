{
  "version": 3,
  "sources": ["../../../../../node_modules/@storybook/react/dist/esm/client/preview/globals.js", "../../../../../node_modules/@storybook/react/dist/esm/client/preview/index.js", "../../../../../node_modules/@storybook/react/dist/esm/client/testing/index.js", "../../../../../node_modules/@storybook/react/dist/esm/client/index.js"],
  "sourcesContent": ["import global from 'global';\r\nvar globalWindow = global.window;\r\n\r\nif (globalWindow) {\r\n  globalWindow.STORYBOOK_ENV = 'react';\r\n}", "import \"core-js/modules/es.array.concat.js\";\r\n\r\n/* eslint-disable prefer-destructuring */\r\nimport { start } from '@storybook/core';\r\nimport './globals';\r\nimport { renderToDOM, render } from './render';\r\nvar framework = 'react';\r\nvar api = start(renderToDOM, {\r\n  render: render\r\n});\r\nexport var storiesOf = function storiesOf(kind, m) {\r\n  return api.clientApi.storiesOf(kind, m).addParameters({\r\n    framework: framework\r\n  });\r\n};\r\nexport var configure = function configure() {\r\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n\r\n  return api.configure.apply(api, [framework].concat(args));\r\n};\r\nexport var addDecorator = api.clientApi.addDecorator;\r\nexport var addParameters = api.clientApi.addParameters;\r\nexport var clearDecorators = api.clientApi.clearDecorators;\r\nexport var setAddon = api.clientApi.setAddon;\r\nexport var forceReRender = api.forceReRender;\r\nexport var getStorybook = api.clientApi.getStorybook;\r\nexport var raw = api.clientApi.raw;", "import { composeStory as originalComposeStory, composeStories as originalComposeStories, setProjectAnnotations as originalSetProjectAnnotations } from '@storybook/store';\r\nimport { once } from '@storybook/client-logger';\r\nimport { render } from '../preview/render';\r\n\r\n/** Function that sets the globalConfig of your storybook. The global config is the preview module of your .storybook folder.\r\n *\r\n * It should be run a single time, so that your global config (e.g. decorators) is applied to your stories when using `composeStories` or `composeStory`.\r\n *\r\n * Example:\r\n *```jsx\r\n * // setup.js (for jest)\r\n * import { setProjectAnnotations } from '@storybook/react';\r\n * import * as projectAnnotations from './.storybook/preview';\r\n *\r\n * setProjectAnnotations(projectAnnotations);\r\n *```\r\n *\r\n * @param projectAnnotations - e.g. (import * as projectAnnotations from '../.storybook/preview')\r\n */\r\nexport function setProjectAnnotations(projectAnnotations) {\r\n  originalSetProjectAnnotations(projectAnnotations);\r\n}\r\n/** Preserved for users migrating from `@storybook/testing-react`.\r\n *\r\n * @deprecated Use setProjectAnnotations instead\r\n */\r\n\r\nexport function setGlobalConfig(projectAnnotations) {\r\n  once.warn(\"setGlobalConfig is deprecated. Use setProjectAnnotations instead.\");\r\n  setProjectAnnotations(projectAnnotations);\r\n} // This will not be necessary once we have auto preset loading\r\n\r\nvar defaultProjectAnnotations = {\r\n  render: render\r\n};\r\n/**\r\n * Function that will receive a story along with meta (e.g. a default export from a .stories file)\r\n * and optionally projectAnnotations e.g. (import * from '../.storybook/preview)\r\n * and will return a composed component that has all args/parameters/decorators/etc combined and applied to it.\r\n *\r\n *\r\n * It's very useful for reusing a story in scenarios outside of Storybook like unit testing.\r\n *\r\n * Example:\r\n *```jsx\r\n * import { render } from '@testing-library/react';\r\n * import { composeStory } from '@storybook/react';\r\n * import Meta, { Primary as PrimaryStory } from './Button.stories';\r\n *\r\n * const Primary = composeStory(PrimaryStory, Meta);\r\n *\r\n * test('renders primary button with Hello World', () => {\r\n *   const { getByText } = render(<Primary>Hello world</Primary>);\r\n *   expect(getByText(/Hello world/i)).not.toBeNull();\r\n * });\r\n *```\r\n *\r\n * @param story\r\n * @param componentAnnotations - e.g. (import Meta from './Button.stories')\r\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\r\n * @param [exportsName] - in case your story does not contain a name and you want it to have a name.\r\n */\r\n\r\nexport function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {\r\n  return originalComposeStory(story, componentAnnotations, projectAnnotations, defaultProjectAnnotations, exportsName);\r\n}\r\n/**\r\n * Function that will receive a stories import (e.g. `import * as stories from './Button.stories'`)\r\n * and optionally projectAnnotations (e.g. `import * from '../.storybook/preview`)\r\n * and will return an object containing all the stories passed, but now as a composed component that has all args/parameters/decorators/etc combined and applied to it.\r\n *\r\n *\r\n * It's very useful for reusing stories in scenarios outside of Storybook like unit testing.\r\n *\r\n * Example:\r\n *```jsx\r\n * import { render } from '@testing-library/react';\r\n * import { composeStories } from '@storybook/react';\r\n * import * as stories from './Button.stories';\r\n *\r\n * const { Primary, Secondary } = composeStories(stories);\r\n *\r\n * test('renders primary button with Hello World', () => {\r\n *   const { getByText } = render(<Primary>Hello world</Primary>);\r\n *   expect(getByText(/Hello world/i)).not.toBeNull();\r\n * });\r\n *```\r\n *\r\n * @param csfExports - e.g. (import * as stories from './Button.stories')\r\n * @param [projectAnnotations] - e.g. (import * as projectAnnotations from '../.storybook/preview') this can be applied automatically if you use `setProjectAnnotations` in your setup files.\r\n */\r\n\r\nexport function composeStories(csfExports, projectAnnotations) {\r\n  var composedStories = originalComposeStories(csfExports, projectAnnotations, composeStory);\r\n  return composedStories;\r\n}", "export { storiesOf, setAddon, addDecorator, addParameters, configure, getStorybook, raw, forceReRender } from './preview';\r\nexport * from './testing';\r\nexport * from './preview/types-6-3';\r\n\r\nif (module && module.hot && module.hot.decline) {\r\n  module.hot.decline();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAmB;AACnB,IAAI,eAAe,cAAAA,QAAO;AAE1B,IAAI,cAAc;AAChB,eAAa,gBAAgB;AAC/B;;;ACCA,IAAI,YAAY;AAChB,IAAI,MAAM,MAAM,aAAa;AAAA,EAC3B;AACF,CAAC;AACM,IAAI,YAAY,SAASC,WAAU,MAAM,GAAG;AACjD,SAAO,IAAI,UAAU,UAAU,MAAM,CAAC,EAAE,cAAc;AAAA,IACpD;AAAA,EACF,CAAC;AACH;AACO,IAAI,YAAY,SAASC,aAAY;AAC1C,WAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,SAAK,QAAQ,UAAU;AAAA,EACzB;AAEA,SAAO,IAAI,UAAU,MAAM,KAAK,CAAC,SAAS,EAAE,OAAO,IAAI,CAAC;AAC1D;AACO,IAAI,eAAe,IAAI,UAAU;AACjC,IAAI,gBAAgB,IAAI,UAAU;AAClC,IAAI,kBAAkB,IAAI,UAAU;AACpC,IAAI,WAAW,IAAI,UAAU;AAC7B,IAAI,gBAAgB,IAAI;AACxB,IAAI,eAAe,IAAI,UAAU;AACjC,IAAI,MAAM,IAAI,UAAU;;;ACTxB,SAASC,uBAAsB,oBAAoB;AACxD,wBAA8B,kBAAkB;AAClD;AAMO,SAAS,gBAAgB,oBAAoB;AAClD,OAAK,KAAK,mEAAmE;AAC7E,EAAAA,uBAAsB,kBAAkB;AAC1C;AAEA,IAAI,4BAA4B;AAAA,EAC9B;AACF;AA6BO,SAASC,cAAa,OAAO,sBAAsB,oBAAoB,aAAa;AACzF,SAAO,aAAqB,OAAO,sBAAsB,oBAAoB,2BAA2B,WAAW;AACrH;AA2BO,SAASC,gBAAe,YAAY,oBAAoB;AAC7D,MAAI,kBAAkB,eAAuB,YAAY,oBAAoBD,aAAY;AACzF,SAAO;AACT;;;AC3FA,IAAI,UAAU,OAAO,OAAO,OAAO,IAAI,SAAS;AAC9C,SAAO,IAAI,QAAQ;AACrB;",
  "names": ["global", "storiesOf", "configure", "setProjectAnnotations", "composeStory", "composeStories"]
}
